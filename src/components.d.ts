/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IBreadcrumbs,
} from './scripts/components/breadcrumbs/breadcrumbs';

export namespace Components {
  interface CAccordion {}
  interface CAccordionSlide {
    'expanded': boolean;
    'heading': string;
    'toggleSlide': () => Promise<void>;
  }
  interface CAlert {
    'header': string;
    'note': boolean;
    'type': string;
  }
  interface CBadge {
    'hollow': boolean;
    'type': string;
  }
  interface CBreadcrumbs {
    'breadcrumbs': IBreadcrumbs[];
  }
  interface CButton {
    'clickHandler': Function;
    'cssClass': string;
    'hollow': boolean;
    'href': string;
    'icon': string;
    'iconDirection': string;
    'size': string;
    'type': string;
  }
  interface CCard {
    'alt': string;
    'cssClass': string;
    'imgDirection': string;
    'imgSrc': string;
    'lazy': boolean;
    'threshold': number;
  }
  interface CCardBody {
    'cardSubtitle': string;
    'cardTitle': string;
  }
  interface CCardFooter {}
  interface CCarousel {
    'autoplay': boolean;
    'cssClass': string;
    'showControls': boolean;
    'showIndicators': boolean;
    'thumbnails': boolean;
    'timer': number;
  }
  interface CCarouselSlide {
    'alt': string;
    'cssClass': string;
    'lazy': boolean;
    'src': string;
    'threshold': number;
  }
  interface CDropdown {
    'buttonIcon': string;
    'buttonType': string;
    'dropdownAlignment': string;
    'dropdownText': string;
    'hideButtonText': boolean;
    'hollow': boolean;
    'megaMenu': boolean;
  }
  interface CImg {
    'alt': string;
    'cssClass': string;
    'lazy': boolean;
    'src': string;
    'threshold': number;
  }
  interface CNavbar {
    'altText': string;
    'collapseAt': string;
    'logoUrl': string;
    'tagline': string;
  }
  interface COverlay {
    'absolute': boolean;
    'hideOverlay': () => Promise<void>;
    'show': boolean;
    'showOverlay': () => Promise<void>;
    'theme': string;
  }
  interface DropdownItem {
    'closeOnClick': boolean;
  }
  interface NavbarGroup {
    'position': string;
  }
  interface NavbarItem {
    'position': string;
  }
  interface NavbarRow {}
}

declare global {


  interface HTMLCAccordionElement extends Components.CAccordion, HTMLStencilElement {}
  var HTMLCAccordionElement: {
    prototype: HTMLCAccordionElement;
    new (): HTMLCAccordionElement;
  };

  interface HTMLCAccordionSlideElement extends Components.CAccordionSlide, HTMLStencilElement {}
  var HTMLCAccordionSlideElement: {
    prototype: HTMLCAccordionSlideElement;
    new (): HTMLCAccordionSlideElement;
  };

  interface HTMLCAlertElement extends Components.CAlert, HTMLStencilElement {}
  var HTMLCAlertElement: {
    prototype: HTMLCAlertElement;
    new (): HTMLCAlertElement;
  };

  interface HTMLCBadgeElement extends Components.CBadge, HTMLStencilElement {}
  var HTMLCBadgeElement: {
    prototype: HTMLCBadgeElement;
    new (): HTMLCBadgeElement;
  };

  interface HTMLCBreadcrumbsElement extends Components.CBreadcrumbs, HTMLStencilElement {}
  var HTMLCBreadcrumbsElement: {
    prototype: HTMLCBreadcrumbsElement;
    new (): HTMLCBreadcrumbsElement;
  };

  interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {}
  var HTMLCButtonElement: {
    prototype: HTMLCButtonElement;
    new (): HTMLCButtonElement;
  };

  interface HTMLCCardElement extends Components.CCard, HTMLStencilElement {}
  var HTMLCCardElement: {
    prototype: HTMLCCardElement;
    new (): HTMLCCardElement;
  };

  interface HTMLCCardBodyElement extends Components.CCardBody, HTMLStencilElement {}
  var HTMLCCardBodyElement: {
    prototype: HTMLCCardBodyElement;
    new (): HTMLCCardBodyElement;
  };

  interface HTMLCCardFooterElement extends Components.CCardFooter, HTMLStencilElement {}
  var HTMLCCardFooterElement: {
    prototype: HTMLCCardFooterElement;
    new (): HTMLCCardFooterElement;
  };

  interface HTMLCCarouselElement extends Components.CCarousel, HTMLStencilElement {}
  var HTMLCCarouselElement: {
    prototype: HTMLCCarouselElement;
    new (): HTMLCCarouselElement;
  };

  interface HTMLCCarouselSlideElement extends Components.CCarouselSlide, HTMLStencilElement {}
  var HTMLCCarouselSlideElement: {
    prototype: HTMLCCarouselSlideElement;
    new (): HTMLCCarouselSlideElement;
  };

  interface HTMLCDropdownElement extends Components.CDropdown, HTMLStencilElement {}
  var HTMLCDropdownElement: {
    prototype: HTMLCDropdownElement;
    new (): HTMLCDropdownElement;
  };

  interface HTMLCImgElement extends Components.CImg, HTMLStencilElement {}
  var HTMLCImgElement: {
    prototype: HTMLCImgElement;
    new (): HTMLCImgElement;
  };

  interface HTMLCNavbarElement extends Components.CNavbar, HTMLStencilElement {}
  var HTMLCNavbarElement: {
    prototype: HTMLCNavbarElement;
    new (): HTMLCNavbarElement;
  };

  interface HTMLCOverlayElement extends Components.COverlay, HTMLStencilElement {}
  var HTMLCOverlayElement: {
    prototype: HTMLCOverlayElement;
    new (): HTMLCOverlayElement;
  };

  interface HTMLDropdownItemElement extends Components.DropdownItem, HTMLStencilElement {}
  var HTMLDropdownItemElement: {
    prototype: HTMLDropdownItemElement;
    new (): HTMLDropdownItemElement;
  };

  interface HTMLNavbarGroupElement extends Components.NavbarGroup, HTMLStencilElement {}
  var HTMLNavbarGroupElement: {
    prototype: HTMLNavbarGroupElement;
    new (): HTMLNavbarGroupElement;
  };

  interface HTMLNavbarItemElement extends Components.NavbarItem, HTMLStencilElement {}
  var HTMLNavbarItemElement: {
    prototype: HTMLNavbarItemElement;
    new (): HTMLNavbarItemElement;
  };

  interface HTMLNavbarRowElement extends Components.NavbarRow, HTMLStencilElement {}
  var HTMLNavbarRowElement: {
    prototype: HTMLNavbarRowElement;
    new (): HTMLNavbarRowElement;
  };
  interface HTMLElementTagNameMap {
    'c-accordion': HTMLCAccordionElement;
    'c-accordion-slide': HTMLCAccordionSlideElement;
    'c-alert': HTMLCAlertElement;
    'c-badge': HTMLCBadgeElement;
    'c-breadcrumbs': HTMLCBreadcrumbsElement;
    'c-button': HTMLCButtonElement;
    'c-card': HTMLCCardElement;
    'c-card-body': HTMLCCardBodyElement;
    'c-card-footer': HTMLCCardFooterElement;
    'c-carousel': HTMLCCarouselElement;
    'c-carousel-slide': HTMLCCarouselSlideElement;
    'c-dropdown': HTMLCDropdownElement;
    'c-img': HTMLCImgElement;
    'c-navbar': HTMLCNavbarElement;
    'c-overlay': HTMLCOverlayElement;
    'dropdown-item': HTMLDropdownItemElement;
    'navbar-group': HTMLNavbarGroupElement;
    'navbar-item': HTMLNavbarItemElement;
    'navbar-row': HTMLNavbarRowElement;
  }
}

declare namespace LocalJSX {
  interface CAccordion extends JSXBase.HTMLAttributes<HTMLCAccordionElement> {}
  interface CAccordionSlide extends JSXBase.HTMLAttributes<HTMLCAccordionSlideElement> {
    'expanded'?: boolean;
    'heading'?: string;
  }
  interface CAlert extends JSXBase.HTMLAttributes<HTMLCAlertElement> {
    'header'?: string;
    'note'?: boolean;
    'type'?: string;
  }
  interface CBadge extends JSXBase.HTMLAttributes<HTMLCBadgeElement> {
    'hollow'?: boolean;
    'type'?: string;
  }
  interface CBreadcrumbs extends JSXBase.HTMLAttributes<HTMLCBreadcrumbsElement> {
    'breadcrumbs'?: IBreadcrumbs[];
  }
  interface CButton extends JSXBase.HTMLAttributes<HTMLCButtonElement> {
    'clickHandler'?: Function;
    'cssClass'?: string;
    'hollow'?: boolean;
    'href'?: string;
    'icon'?: string;
    'iconDirection'?: string;
    'size'?: string;
    'type'?: string;
  }
  interface CCard extends JSXBase.HTMLAttributes<HTMLCCardElement> {
    'alt'?: string;
    'cssClass'?: string;
    'imgDirection'?: string;
    'imgSrc'?: string;
    'lazy'?: boolean;
    'threshold'?: number;
  }
  interface CCardBody extends JSXBase.HTMLAttributes<HTMLCCardBodyElement> {
    'cardSubtitle'?: string;
    'cardTitle'?: string;
  }
  interface CCardFooter extends JSXBase.HTMLAttributes<HTMLCCardFooterElement> {}
  interface CCarousel extends JSXBase.HTMLAttributes<HTMLCCarouselElement> {
    'autoplay'?: boolean;
    'cssClass'?: string;
    'showControls'?: boolean;
    'showIndicators'?: boolean;
    'thumbnails'?: boolean;
    'timer'?: number;
  }
  interface CCarouselSlide extends JSXBase.HTMLAttributes<HTMLCCarouselSlideElement> {
    'alt'?: string;
    'cssClass'?: string;
    'lazy'?: boolean;
    'src'?: string;
    'threshold'?: number;
  }
  interface CDropdown extends JSXBase.HTMLAttributes<HTMLCDropdownElement> {
    'buttonIcon'?: string;
    'buttonType'?: string;
    'dropdownAlignment'?: string;
    'dropdownText'?: string;
    'hideButtonText'?: boolean;
    'hollow'?: boolean;
    'megaMenu'?: boolean;
  }
  interface CImg extends JSXBase.HTMLAttributes<HTMLCImgElement> {
    'alt'?: string;
    'cssClass'?: string;
    'lazy'?: boolean;
    'src'?: string;
    'threshold'?: number;
  }
  interface CNavbar extends JSXBase.HTMLAttributes<HTMLCNavbarElement> {
    'altText'?: string;
    'collapseAt'?: string;
    'logoUrl'?: string;
    'tagline'?: string;
  }
  interface COverlay extends JSXBase.HTMLAttributes<HTMLCOverlayElement> {
    'absolute'?: boolean;
    'show'?: boolean;
    'theme'?: string;
  }
  interface DropdownItem extends JSXBase.HTMLAttributes<HTMLDropdownItemElement> {
    'closeOnClick'?: boolean;
    'onCloseDropdown'?: (event: CustomEvent<any>) => void;
  }
  interface NavbarGroup extends JSXBase.HTMLAttributes<HTMLNavbarGroupElement> {
    'position'?: string;
  }
  interface NavbarItem extends JSXBase.HTMLAttributes<HTMLNavbarItemElement> {
    'position'?: string;
  }
  interface NavbarRow extends JSXBase.HTMLAttributes<HTMLNavbarRowElement> {}

  interface IntrinsicElements {
    'c-accordion': CAccordion;
    'c-accordion-slide': CAccordionSlide;
    'c-alert': CAlert;
    'c-badge': CBadge;
    'c-breadcrumbs': CBreadcrumbs;
    'c-button': CButton;
    'c-card': CCard;
    'c-card-body': CCardBody;
    'c-card-footer': CCardFooter;
    'c-carousel': CCarousel;
    'c-carousel-slide': CCarouselSlide;
    'c-dropdown': CDropdown;
    'c-img': CImg;
    'c-navbar': CNavbar;
    'c-overlay': COverlay;
    'dropdown-item': DropdownItem;
    'navbar-group': NavbarGroup;
    'navbar-item': NavbarItem;
    'navbar-row': NavbarRow;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


