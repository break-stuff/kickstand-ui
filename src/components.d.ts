/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IBreadcrumbs,
} from './scripts/components/breadcrumbs/breadcrumbs';

export namespace Components {
  interface CAccordion {}
  interface CAccordionSlide {
    'expanded': boolean;
    'heading': string;
    'toggleSlide': () => Promise<void>;
  }
  interface CAlert {
    'header': string;
    'note': boolean;
    'type': string;
  }
  interface CBadge {
    'hollow': boolean;
    'type': string;
  }
  interface CBreadcrumbs {
    'breadcrumbs': IBreadcrumbs[];
  }
  interface CButton {
    'clear': boolean;
    'clickHandler': Function;
    'cssClass': string;
    'hollow': boolean;
    'href': string;
    'icon': string;
    'iconDirection': string;
    'size': string;
    'type': string;
  }
  interface CCard {
    'alt': string;
    'imgDirection': string;
    'imgSrc': string;
    'lazy': boolean;
    'threshold': number;
  }
  interface CCarousel {
    'autoplay': boolean;
    'cssClass': string;
    'showControls': boolean;
    'showIndicators': boolean;
    'thumbnails': boolean;
    'timer': number;
  }
  interface CCarouselSlide {
    'alt': string;
    'cssClass': string;
    'lazy': boolean;
    'src': string;
    'threshold': number;
  }
  interface CDropdown {
    'buttonIcon': string;
    'buttonType': string;
    'dropdownAlignment': string;
    'dropdownText': string;
    'hideButtonText': boolean;
    'hollow': boolean;
    'megaMenu': boolean;
  }
  interface CImg {
    'alt': string;
    'cssClass': string;
    'lazy': boolean;
    'src': string;
    'threshold': number;
  }
  interface CNavbar {
    'altText': string;
    'collapseAt': string;
    'logoUrl': string;
    'tagline': string;
  }
  interface CNavbarGroup {
    'position': string;
  }
  interface CNavbarItem {
    'position': string;
  }
  interface CNavbarRow {}
  interface COverlay {
    'absolute': boolean;
    'hideOverlay': () => Promise<void>;
    'show': boolean;
    'showOverlay': () => Promise<void>;
    'theme': string;
  }
  interface CSideDrawer {
    'close': () => Promise<void>;
    'headerText': string;
    'name': string;
    'onDrawerClose': Function;
    'onDrawerOpen': Function;
    'open': () => Promise<void>;
    'position': string;
  }
  interface CTooltip {
    'content': boolean;
    'disable': boolean;
    'hideDecoration': boolean;
    'name': string;
    'position': string;
    'show': boolean;
    'size': string;
  }
  interface CardBody {
    'cardSubtitle': string;
    'cardTitle': string;
  }
  interface CardFooter {}
  interface DropdownItem {
    'closeOnClick': boolean;
  }
}

declare global {


  interface HTMLCAccordionElement extends Components.CAccordion, HTMLStencilElement {}
  var HTMLCAccordionElement: {
    prototype: HTMLCAccordionElement;
    new (): HTMLCAccordionElement;
  };

  interface HTMLCAccordionSlideElement extends Components.CAccordionSlide, HTMLStencilElement {}
  var HTMLCAccordionSlideElement: {
    prototype: HTMLCAccordionSlideElement;
    new (): HTMLCAccordionSlideElement;
  };

  interface HTMLCAlertElement extends Components.CAlert, HTMLStencilElement {}
  var HTMLCAlertElement: {
    prototype: HTMLCAlertElement;
    new (): HTMLCAlertElement;
  };

  interface HTMLCBadgeElement extends Components.CBadge, HTMLStencilElement {}
  var HTMLCBadgeElement: {
    prototype: HTMLCBadgeElement;
    new (): HTMLCBadgeElement;
  };

  interface HTMLCBreadcrumbsElement extends Components.CBreadcrumbs, HTMLStencilElement {}
  var HTMLCBreadcrumbsElement: {
    prototype: HTMLCBreadcrumbsElement;
    new (): HTMLCBreadcrumbsElement;
  };

  interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {}
  var HTMLCButtonElement: {
    prototype: HTMLCButtonElement;
    new (): HTMLCButtonElement;
  };

  interface HTMLCCardElement extends Components.CCard, HTMLStencilElement {}
  var HTMLCCardElement: {
    prototype: HTMLCCardElement;
    new (): HTMLCCardElement;
  };

  interface HTMLCCarouselElement extends Components.CCarousel, HTMLStencilElement {}
  var HTMLCCarouselElement: {
    prototype: HTMLCCarouselElement;
    new (): HTMLCCarouselElement;
  };

  interface HTMLCCarouselSlideElement extends Components.CCarouselSlide, HTMLStencilElement {}
  var HTMLCCarouselSlideElement: {
    prototype: HTMLCCarouselSlideElement;
    new (): HTMLCCarouselSlideElement;
  };

  interface HTMLCDropdownElement extends Components.CDropdown, HTMLStencilElement {}
  var HTMLCDropdownElement: {
    prototype: HTMLCDropdownElement;
    new (): HTMLCDropdownElement;
  };

  interface HTMLCImgElement extends Components.CImg, HTMLStencilElement {}
  var HTMLCImgElement: {
    prototype: HTMLCImgElement;
    new (): HTMLCImgElement;
  };

  interface HTMLCNavbarElement extends Components.CNavbar, HTMLStencilElement {}
  var HTMLCNavbarElement: {
    prototype: HTMLCNavbarElement;
    new (): HTMLCNavbarElement;
  };

  interface HTMLCNavbarGroupElement extends Components.CNavbarGroup, HTMLStencilElement {}
  var HTMLCNavbarGroupElement: {
    prototype: HTMLCNavbarGroupElement;
    new (): HTMLCNavbarGroupElement;
  };

  interface HTMLCNavbarItemElement extends Components.CNavbarItem, HTMLStencilElement {}
  var HTMLCNavbarItemElement: {
    prototype: HTMLCNavbarItemElement;
    new (): HTMLCNavbarItemElement;
  };

  interface HTMLCNavbarRowElement extends Components.CNavbarRow, HTMLStencilElement {}
  var HTMLCNavbarRowElement: {
    prototype: HTMLCNavbarRowElement;
    new (): HTMLCNavbarRowElement;
  };

  interface HTMLCOverlayElement extends Components.COverlay, HTMLStencilElement {}
  var HTMLCOverlayElement: {
    prototype: HTMLCOverlayElement;
    new (): HTMLCOverlayElement;
  };

  interface HTMLCSideDrawerElement extends Components.CSideDrawer, HTMLStencilElement {}
  var HTMLCSideDrawerElement: {
    prototype: HTMLCSideDrawerElement;
    new (): HTMLCSideDrawerElement;
  };

  interface HTMLCTooltipElement extends Components.CTooltip, HTMLStencilElement {}
  var HTMLCTooltipElement: {
    prototype: HTMLCTooltipElement;
    new (): HTMLCTooltipElement;
  };

  interface HTMLCardBodyElement extends Components.CardBody, HTMLStencilElement {}
  var HTMLCardBodyElement: {
    prototype: HTMLCardBodyElement;
    new (): HTMLCardBodyElement;
  };

  interface HTMLCardFooterElement extends Components.CardFooter, HTMLStencilElement {}
  var HTMLCardFooterElement: {
    prototype: HTMLCardFooterElement;
    new (): HTMLCardFooterElement;
  };

  interface HTMLDropdownItemElement extends Components.DropdownItem, HTMLStencilElement {}
  var HTMLDropdownItemElement: {
    prototype: HTMLDropdownItemElement;
    new (): HTMLDropdownItemElement;
  };
  interface HTMLElementTagNameMap {
    'c-accordion': HTMLCAccordionElement;
    'c-accordion-slide': HTMLCAccordionSlideElement;
    'c-alert': HTMLCAlertElement;
    'c-badge': HTMLCBadgeElement;
    'c-breadcrumbs': HTMLCBreadcrumbsElement;
    'c-button': HTMLCButtonElement;
    'c-card': HTMLCCardElement;
    'c-carousel': HTMLCCarouselElement;
    'c-carousel-slide': HTMLCCarouselSlideElement;
    'c-dropdown': HTMLCDropdownElement;
    'c-img': HTMLCImgElement;
    'c-navbar': HTMLCNavbarElement;
    'c-navbar-group': HTMLCNavbarGroupElement;
    'c-navbar-item': HTMLCNavbarItemElement;
    'c-navbar-row': HTMLCNavbarRowElement;
    'c-overlay': HTMLCOverlayElement;
    'c-side-drawer': HTMLCSideDrawerElement;
    'c-tooltip': HTMLCTooltipElement;
    'card-body': HTMLCardBodyElement;
    'card-footer': HTMLCardFooterElement;
    'dropdown-item': HTMLDropdownItemElement;
  }
}

declare namespace LocalJSX {
  interface CAccordion {}
  interface CAccordionSlide {
    'expanded'?: boolean;
    'heading'?: string;
  }
  interface CAlert {
    'header'?: string;
    'note'?: boolean;
    'type'?: string;
  }
  interface CBadge {
    'hollow'?: boolean;
    'type'?: string;
  }
  interface CBreadcrumbs {
    'breadcrumbs'?: IBreadcrumbs[];
  }
  interface CButton {
    'clear'?: boolean;
    'clickHandler'?: Function;
    'cssClass'?: string;
    'hollow'?: boolean;
    'href'?: string;
    'icon'?: string;
    'iconDirection'?: string;
    'size'?: string;
    'type'?: string;
  }
  interface CCard {
    'alt'?: string;
    'imgDirection'?: string;
    'imgSrc'?: string;
    'lazy'?: boolean;
    'threshold'?: number;
  }
  interface CCarousel {
    'autoplay'?: boolean;
    'cssClass'?: string;
    'showControls'?: boolean;
    'showIndicators'?: boolean;
    'thumbnails'?: boolean;
    'timer'?: number;
  }
  interface CCarouselSlide {
    'alt'?: string;
    'cssClass'?: string;
    'lazy'?: boolean;
    'src'?: string;
    'threshold'?: number;
  }
  interface CDropdown {
    'buttonIcon'?: string;
    'buttonType'?: string;
    'dropdownAlignment'?: string;
    'dropdownText'?: string;
    'hideButtonText'?: boolean;
    'hollow'?: boolean;
    'megaMenu'?: boolean;
  }
  interface CImg {
    'alt'?: string;
    'cssClass'?: string;
    'lazy'?: boolean;
    'src'?: string;
    'threshold'?: number;
  }
  interface CNavbar {
    'altText'?: string;
    'collapseAt'?: string;
    'logoUrl'?: string;
    'tagline'?: string;
  }
  interface CNavbarGroup {
    'position'?: string;
  }
  interface CNavbarItem {
    'position'?: string;
  }
  interface CNavbarRow {}
  interface COverlay {
    'absolute'?: boolean;
    'show'?: boolean;
    'theme'?: string;
  }
  interface CSideDrawer {
    'headerText'?: string;
    'name'?: string;
    'onCloseDrawerCompleted'?: (event: CustomEvent<any>) => void;
    'onDrawerClose'?: Function;
    'onDrawerOpen'?: Function;
    'onOpenDrawerCompleted'?: (event: CustomEvent<any>) => void;
    'position'?: string;
  }
  interface CTooltip {
    'content'?: boolean;
    'disable'?: boolean;
    'hideDecoration'?: boolean;
    'name'?: string;
    'position'?: string;
    'show'?: boolean;
    'size'?: string;
  }
  interface CardBody {
    'cardSubtitle'?: string;
    'cardTitle'?: string;
  }
  interface CardFooter {}
  interface DropdownItem {
    'closeOnClick'?: boolean;
    'onCloseDropdown'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'c-accordion': CAccordion;
    'c-accordion-slide': CAccordionSlide;
    'c-alert': CAlert;
    'c-badge': CBadge;
    'c-breadcrumbs': CBreadcrumbs;
    'c-button': CButton;
    'c-card': CCard;
    'c-carousel': CCarousel;
    'c-carousel-slide': CCarouselSlide;
    'c-dropdown': CDropdown;
    'c-img': CImg;
    'c-navbar': CNavbar;
    'c-navbar-group': CNavbarGroup;
    'c-navbar-item': CNavbarItem;
    'c-navbar-row': CNavbarRow;
    'c-overlay': COverlay;
    'c-side-drawer': CSideDrawer;
    'c-tooltip': CTooltip;
    'card-body': CardBody;
    'card-footer': CardFooter;
    'dropdown-item': DropdownItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'c-accordion': LocalJSX.CAccordion & JSXBase.HTMLAttributes<HTMLCAccordionElement>;
      'c-accordion-slide': LocalJSX.CAccordionSlide & JSXBase.HTMLAttributes<HTMLCAccordionSlideElement>;
      'c-alert': LocalJSX.CAlert & JSXBase.HTMLAttributes<HTMLCAlertElement>;
      'c-badge': LocalJSX.CBadge & JSXBase.HTMLAttributes<HTMLCBadgeElement>;
      'c-breadcrumbs': LocalJSX.CBreadcrumbs & JSXBase.HTMLAttributes<HTMLCBreadcrumbsElement>;
      'c-button': LocalJSX.CButton & JSXBase.HTMLAttributes<HTMLCButtonElement>;
      'c-card': LocalJSX.CCard & JSXBase.HTMLAttributes<HTMLCCardElement>;
      'c-carousel': LocalJSX.CCarousel & JSXBase.HTMLAttributes<HTMLCCarouselElement>;
      'c-carousel-slide': LocalJSX.CCarouselSlide & JSXBase.HTMLAttributes<HTMLCCarouselSlideElement>;
      'c-dropdown': LocalJSX.CDropdown & JSXBase.HTMLAttributes<HTMLCDropdownElement>;
      'c-img': LocalJSX.CImg & JSXBase.HTMLAttributes<HTMLCImgElement>;
      'c-navbar': LocalJSX.CNavbar & JSXBase.HTMLAttributes<HTMLCNavbarElement>;
      'c-navbar-group': LocalJSX.CNavbarGroup & JSXBase.HTMLAttributes<HTMLCNavbarGroupElement>;
      'c-navbar-item': LocalJSX.CNavbarItem & JSXBase.HTMLAttributes<HTMLCNavbarItemElement>;
      'c-navbar-row': LocalJSX.CNavbarRow & JSXBase.HTMLAttributes<HTMLCNavbarRowElement>;
      'c-overlay': LocalJSX.COverlay & JSXBase.HTMLAttributes<HTMLCOverlayElement>;
      'c-side-drawer': LocalJSX.CSideDrawer & JSXBase.HTMLAttributes<HTMLCSideDrawerElement>;
      'c-tooltip': LocalJSX.CTooltip & JSXBase.HTMLAttributes<HTMLCTooltipElement>;
      'card-body': LocalJSX.CardBody & JSXBase.HTMLAttributes<HTMLCardBodyElement>;
      'card-footer': LocalJSX.CardFooter & JSXBase.HTMLAttributes<HTMLCardFooterElement>;
      'dropdown-item': LocalJSX.DropdownItem & JSXBase.HTMLAttributes<HTMLDropdownItemElement>;
    }
  }
}


